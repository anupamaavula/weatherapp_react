{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","time","moment","utcOffset","timezone","format","setState","getWeather","zipInput","document","getElementById","value","console","log","fetch","then","response","status","json","data","zip","city","name","country","sys","temperature","Math","round","main","temp","description","weather","icon","catch","err","className","id","type","placeholder","onClick","this","class","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PAgFeA,G,wNAzEbC,MAAQ,G,EACRC,QAAU,WACR,IAAIC,EAAOC,MACAC,UAAU,EAAKJ,MAAMK,SAAW,IAChCC,OAAO,QAClB,EAAKC,SAAS,CACZL,KAAMA,K,EAGVM,WAAa,WACX,IAAIC,EAAWC,SAASC,eAAe,WAAWC,MAClDC,QAAQC,IAAIL,GAKZM,MAAM,uDAAuDN,EAAS,0DACnEO,MAAK,SAACC,GACmB,MAApBA,EAASC,OAMbD,EAASE,OAAOH,MAAK,SAACI,GACpBP,QAAQC,IAAIM,GACZ,EAAKb,SAAS,CACZc,IAAKD,EAAKX,SACVa,KAAMF,EAAKG,KACXC,QAAQJ,EAAKK,IAAID,QACjBE,YAAaC,KAAKC,MAAMR,EAAKS,KAAKC,MAAM,QAExCC,YAAaX,EAAKY,QAAQ,GAAGD,YAC7B1B,SAAUe,EAAKf,SACf4B,KAAMb,EAAKY,QAAQ,GAAGC,OAExB,EAAKhC,aAjBLY,QAAQC,IACN,gDAAkDG,EAASC,WAmBhEgB,OAAM,SAACC,GACNtB,QAAQC,IAAI,kBAAmBqB,O,uDAInC,OACE,oCAEE,yBAAKC,UAAU,aACb,4CAEA,yBAAKC,GAAG,UACN,2BAAOC,KAAK,OAAOC,YAAY,gBAAgBF,GAAG,YAClD,4BAAQA,GAAG,MAAMG,QAASC,KAAKjC,YAA/B,WAEF,yBAAK6B,GAAG,QAEN,6BACM,oCAAS,8BAAOI,KAAKzC,MAAMsB,KAAMmB,KAAKzC,MAAMwB,UAE5C,uBAAGa,GAAG,QAAN,eAA0BI,KAAKzC,MAAM0B,aAErC,uBAAGW,GAAG,QAAN,eAA0BI,KAAKzC,MAAM+B,aAErC,uBAAGW,MAAM,QAAT,QAAsBD,KAAKzC,MAAME,MACjC,yBAAKyC,IAAG,4CAAuCF,KAAKzC,MAAMiC,KAAlD,QAA8DW,IAAI,Y,GAjE1EC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASC,eAAe,SDyHpB,kBAAmB2C,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.4bbfb05f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n//import tz from \"zipcode-to-timezone\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n  getTime = () => {\n    let time = moment()\n              .utcOffset(this.state.timezone / 60)\n              .format(\"llll\");\n    this.setState({\n      time: time,\n    });\n  };\n  getWeather = () => {\n    let zipInput = document.getElementById(\"zipcode\").value;\n    console.log(zipInput);\n    \n    \n    // let tempval=parseInt( ((this.state.temperature-273.15)*1.8)+32)+'&#8457' ;\n    // console.log(tempval);\n    fetch('https://api.openweathermap.org/data/2.5/weather?zip='+zipInput+'&units=imperial&appid=93366594e122065ac46ecc951c9a81df')\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n        response.json().then((data) => {\n          console.log(data);\n          this.setState({\n            zip: data.zipInput,\n            city: data.name,\n            country:data.sys.country,\n            temperature: Math.round(data.main.temp)+\"Â°F\",\n            \n            description: data.weather[0].description,\n            timezone: data.timezone,\n            icon: data.weather[0].icon,\n          });\n          this.getTime();\n        });\n      })\n      .catch((err) => {\n        console.log(\"Fetch Error :-S\", err);\n      });\n  };\n  render() {\n    return (\n      <>\n      \n        <div className=\"container\">\n          <h2>WEATHER APP</h2>\n          </div>\n          <div id=\"header\">\n            <input type=\"text\" placeholder=\"Enter ZipCode\" id=\"zipcode\"></input>\n            <button id=\"btn\" onClick={this.getWeather}>SEARCH</button>\n          </div>\n          <div id=\"main\">\n            \n            <div>\n                  <p>CITY :<span>{this.state.city}{this.state.country}</span></p>\n                  \n                  <p id=\"temp\">TEMPERATURE:{this.state.temperature}</p>\n                  \n                  <p id=\"desc\">DESCRIPTION:{this.state.description}</p>\n                  \n                  <p class=\"time\">TIME:{this.state.time}</p>\n                  <img src={`https://openweathermap.org/img/wn/${this.state.icon}.png`} alt=\"\"/>\n            </div>\n          </div>\n        \n      </>\n      \n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}